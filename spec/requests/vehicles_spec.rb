require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/vehicles", type: :request do
  
  let(:user) { create(:user) }
  let(:vehicle) { create(:vehicle, user: user) }
  let(:valid_attributes) { attributes_for(:vehicle) }
  let(:invalid_attributes) { { "color" => "black" } }

  describe "GET /index" do
    it "renders a successful response" do
      vehicle
      get user_vehicles_url(user_id: user.id)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get user_vehicle_url(id: vehicle.id, user_id: user.id)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_user_vehicle_url(user_id: user.id)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      get edit_user_vehicle_url(user_id: user.id, id: vehicle.id)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Vehicle" do
        expect {
          post user_vehicles_url(user_id: user.id), params: { vehicle: valid_attributes }
        }.to change(Vehicle, :count).by(1) # Not working properly, ask why
      end

      it "redirects to the created vehicle" do
        post user_vehicles_url(user_id: user.id, id: vehicle.id), params: { vehicle: valid_attributes }
        expect(response).to redirect_to(user_vehicle_url(id: Vehicle.last.id, user_id: Vehicle.last.user_id))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Vehicle" do
        expect {
          post user_vehicles_url(user_id: user.id), params: { vehicle: invalid_attributes }
        }.to change(Vehicle, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post user_vehicles_url(user_id: user.id), params: { vehicle: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { "model": "Ford Laguna",
        "air_conditioning": 1,
        "vehicle_type": "car",
        "consumption": 4.5,
        "nickname": "lago" } }
        
        it "updates the requested vehicle" do
          patch user_vehicle_url(user_id: user.id, id: vehicle.id), params: { vehicle: new_attributes }
          vehicle.reload
          expect(vehicle.model).to eq("Ford Laguna")
        end
        
        it "redirects to the vehicle" do
        patch user_vehicle_url(user_id: user.id, id: vehicle.id), params: { vehicle: new_attributes }
        expect(response).to redirect_to(user_vehicle_url(user_id: user.id, id: vehicle.id))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        patch user_vehicle_url(user_id: user.id, id: vehicle.id), params: { vehicle: invalid_attributes }
        expect(response).to have_http_status(302)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested vehicle" do
      vehicle
      count = Vehicle.count
      delete user_vehicle_url(user_id: user.id, id: vehicle.id)
      expect(Vehicle.count).to eq(count - 1)
    end

    it "redirects to the vehicles list" do
      delete user_vehicle_url(user_id: user.id, id: vehicle.id)
      expect(response).to redirect_to(user_vehicles_url)
    end
  end
end
